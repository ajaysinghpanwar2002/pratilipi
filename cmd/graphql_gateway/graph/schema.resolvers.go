package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/ajaysinghpanwar2002/pratilipi/cmd/graphql_gateway/graph/model"
)

var userServiceURL = os.Getenv("USER_SERVICE_URL")
var productServiceURL = os.Getenv("PRODUCT_SERVICE_URL")
var orderServiceURL = os.Getenv("ORDER_SERVICE_URL")

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	userData := map[string]string{
		"username": input.Username,
		"email":    input.Email,
		"password": input.Password,
	}

	userJson, err := json.Marshal(userData)
	if err != nil {
		return nil, fmt.Errorf("error creating JSON payload: %v", err)
	}
	resp, err := http.Post(userServiceURL+"register", "application/json", bytes.NewBuffer(userJson))
	if err != nil {
		return nil, fmt.Errorf("error sending request to user service: %v", err)
	}
	defer resp.Body.Close()

	var user model.User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, fmt.Errorf("error decoding response: %v", err)
	}

	return &user, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	// Create the product request body
	productData := map[string]interface{}{
		"name":        input.Name,
		"description": input.Description,
		"price":       input.Price,
		"stock":       input.Stock,
	}

	// Convert the input to JSON
	jsonData, err := json.Marshal(productData)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal product data: %v", err)
	}

	// Send POST request to the product service
	resp, err := http.Post(productServiceURL+"products", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to create product: %v", err)
	}
	defer resp.Body.Close()

	// Check for errors in the response
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("failed to create product, status code: %d, response: %s", resp.StatusCode, string(body))
	}

	// Parse the response
	var createdProduct model.Product
	err = json.NewDecoder(resp.Body).Decode(&createdProduct)
	if err != nil {
		return nil, fmt.Errorf("failed to decode product response: %v", err)
	}

	// Return the created product
	return &createdProduct, nil
}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	// Create the order request body
	orderData := map[string]interface{}{
		"user_id":    input.UserID,
		"product_id": input.ProductID,
		"quantity":   input.Quantity,
	}

	// Convert the input to JSON
	jsonData, err := json.Marshal(orderData)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal order data: %v", err)
	}

	// Send POST request to the order service "http://localhost:8083/orders"
	resp, err := http.Post(orderServiceURL+"orders", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to place order: %v", err)
	}
	defer resp.Body.Close()

	// Check for errors in the response
	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("failed to place order, status code: %d, response: %s", resp.StatusCode, string(body))
	}

	// Parse the response
	var placedOrder model.Order
	err = json.NewDecoder(resp.Body).Decode(&placedOrder)
	if err != nil {
		return nil, fmt.Errorf("failed to decode order response: %v", err)
	}

	// Return the placed order
	return &placedOrder, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// "http://localhost:8081/users"
	resp, err := http.Get(userServiceURL + "users")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var users []*model.User
	if err := json.NewDecoder(resp.Body).Decode(&users); err != nil {
		return nil, err
	}

	return users, nil
}

// User is the resolver for the user field. "http://localhost:8081/users/" + id
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	resp, err := http.Get(userServiceURL + "users/" + id)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var user model.User
	if err := json.NewDecoder(resp.Body).Decode(&user); err != nil {
		return nil, err
	}

	return &user, nil
}

// Products is the resolver for the products field. "http://localhost:8082/products"
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	resp, err := http.Get(productServiceURL + "products")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var products []*model.Product
	if err := json.NewDecoder(resp.Body).Decode(&products); err != nil {
		return nil, err
	}

	return products, nil
}

// Product is the resolver for the product field."http://localhost:8082/products/" + id
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	resp, err := http.Get(productServiceURL + "products/" + id)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var product model.Product
	if err := json.NewDecoder(resp.Body).Decode(&product); err != nil {
		return nil, err
	}

	return &product, nil
}

// Orders is the resolver for the orders field. "http://localhost:8083/orders"
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	resp, err := http.Get(orderServiceURL + "orders")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var orders []*model.Order
	if err := json.NewDecoder(resp.Body).Decode(&orders); err != nil {
		return nil, err
	}

	return orders, nil
}

// Order is the resolver for the order field. "http://localhost:8083/orders/" + id
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	resp, err := http.Get(orderServiceURL + "orders/" + id)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var order model.Order
	if err := json.NewDecoder(resp.Body).Decode(&order); err != nil {
		return nil, err
	}

	return &order, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
